/**
 * This class represents Web Service, implemented using Servlet.
 * The web service receives requests to display Fibonacci sequences.
 * The web service can display the result in plain text, HTML, XML, and JSON.
 * 
 * A valid URL is of the form
 * http://localhost:8080/FibonacciApp/FibonacciServlet?num=5&&fmt=HTML
 * where num must be an Interger value.
 * where fmt can be HTML, XML, or JSON.
 * for plain text, leave fmt blank.
 * 
 * 
 * @author Robert Brown
 * @version 1.0
 * 
 */
package com.mycompany.ws;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.util.logging.Logger;
import java.util.logging.Level;

//import org.apache.juli.*;
//import org.apache.juli.logging.*;


/**
 * Servlet implementation class FibonacciServlet
 */
@WebServlet("/FibonacciServlet")
public class FibonacciServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
     
	//Create new Logger
	//Log specifics are in the logging.properties file in the WEB-INF/classes folder
	//The logging.properties file specifies the use of JULI logging in Tomcat.
    Logger logger = Logger.getLogger("com.mysystem.ws.FibonacciServlet");
	
    
    /**
     * @see HttpServlet#HttpServlet()
     */
    public FibonacciServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see Servlet#init(ServletConfig)
	 */
	public void init(ServletConfig config) throws ServletException {
		// TODO Auto-generated method stub
		
		logger.info("Fibonacci Servlet Starting");
		
		logger.info("In init method");
		
		logger.info("Loaded Logger Config File: /WEB-INF/cLasses//logging.properties");				
	    
	}

	/**
	 * @see Servlet#destroy()
	 */
	public void destroy() {
		// TODO Auto-generated method stub	
		
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		
		Integer fibNum = null;
		String fNum = null;
		String format = null;
		StringBuffer fibString = new StringBuffer();
		int result;
		
		response.setContentType("text/plain");
		PrintWriter out = response.getWriter();		
		fNum = request.getParameter("num");		
		format = request.getParameter("fmt");	
		String fibonacciJSP = "/FibonacciJSP.jsp";
	
		//Create dispatcher to forward HTML request to be handled by JSP.
		//Using MVC pattern for displaying HTML content.
		RequestDispatcher dispatcher = request.getRequestDispatcher(fibonacciJSP);
		
		logger.info("In doGet method");
		
		try {
			
			if (fNum == null)
				out.println("Welcome To The Fibonacci Generator");
			else 
			{
			   fibNum = Integer.parseInt(fNum.trim());
			
			   if (fibNum < 0)
			  	 response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Query String Value Must Be 0 Or Greater");
			   else 
			   {
				 if (format == null)
					 format = " ";
					 
				  result = FibonacciUtil.fibS(fibNum, fibString, format);				
				 
				 if (result == -1)
					 response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Fibonacci Input Value Is Too Large\n");
				 else if (result == 1 && format.equals("XML") || format.equals("JSON"))
				 {   if (format.equals("XML"))
					    response.setContentType("text/xml");
				 
					 out.println(fibString);
				 }
				 else if (result == 1 && format.equals("HTML"))
				 {
					 request.setAttribute("data", fibString.toString());
					 dispatcher.forward(request,response);
				 }
				 else if (result == 1)
					 out.println("Result: = " + fibString);
									
			   }
			   
		    }		
		 } catch (NumberFormatException nf) { // Generated by integer.parseInt 
		
			System.out.println("Fibonacci Servlet received invalid input - user did not enter an Integer\n");
			System.out.println("See log for Stack Trace.");
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Only integer Numbers Accepted For Fibonacci Computation.\n Set query string parameter to an Integer");
			logger.log(Level.SEVERE, "Fibonacci Servlet received invalid input - user did not enter an Integer\n", nf);
		}
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		
		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "Only GET is Allowed");
	}

	/**
	 * @see HttpServlet#doPut(HttpServletRequest, HttpServletResponse)
	 */
	protected void doPut(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "Only GET is Allowed");
	}

	/**
	 * @see HttpServlet#doDelete(HttpServletRequest, HttpServletResponse)
	 */
	protected void doDelete(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "Only GET is Allowed");
	}

	/**
	 * @see HttpServlet#doTrace(HttpServletRequest, HttpServletResponse)
	 */
	protected void doTrace(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "Only GET is Allowed");
		
	}

}
